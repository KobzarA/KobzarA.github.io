{"version":3,"file":"static/js/320.5e1fdb85.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/CharSearch/CharSearch.js","components/errorBounadary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from \"./error.gif\"\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display:'block', width: '250px', height:'250px', objectFit:'contain', margin:'0 auto'}} \r\n        src={img} alt={'Error!'}/>\r\n\r\n        // <img src={process.env.PUBLIC_URL + \"/error.gif\"} />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService'; \nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState(null);\n    const {clearError, getCharacter, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n        return () => {\n            clearInterval(timerId);\n        };\n    }, []);\n    \n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n        .then(onCharLoaded)\n        .then(() => setProcess(\"confirmed\"));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )   \n}\n\nconst View =  ({data}) => {\n    let {thumbnail, name, description, homepage, wiki} = data;\n \n    return (\n            <div className=\"randomchar__block\">\n                <img src={thumbnail} alt=\"Random character\" className={thumbnail.includes('image_not_available')? \"randomchar__img no_img\" : \"randomchar__img\"}/>\n                <div className=\"randomchar__info\">\n                    <p className=\"randomchar__name\">{name}</p>\n                    <p className=\"randomchar__descr\">\n                        {description}\n                    </p>\n                    <div className=\"randomchar__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n              )\n}\n\nexport default RandomChar;\n","import { useEffect, useState, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spiner/Spiner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\n\nconst setContent = (process, Component, loadingMoreItems) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return loadingMoreItems ? <><Component /><Spinner /></> : null ;\n        case 'confirmed':\n            return <Component/>\n        case 'error':\n            return <ErrorMessage />\n        default:\n            throw new Error('Unexpected process state');\n    }\n\n};\n\nconst CharList = (props) => {\n    const   [charList, setCharList] = useState([]),\n            [loadingMoreItems, setLoadingMoreItems] = useState(false),\n            [offset, setOffset] = useState(210),\n            [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters , process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [] );    \n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList(charList => ([...charList, ...newCharList]));\n        setLoadingMoreItems(loadingMoreItems => false);\n        setOffset(offset => offset+9);\n        setCharEnded(charEnded => ended);\n\n    }\n\n    const onRequest = (offset) => {\n        setLoadingMoreItems(true) \n        getAllCharacters(offset)\n        .then(onCharListLoaded)\n        .then(() => setProcess(\"confirmed\"));\n    }\n\n    let itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const renderItems = (arr) => {\n        const items = arr.map((item, i) => {\n            const {id, thumbnail, name} = item;\n            let imgStyle = thumbnail.includes('image_not_available')? \"no_img\" : null;\n             \n            return (\n                <CSSTransition\n                    key={id}\n                    timeout={500}\n                    classNames='char__item'>\n                       <li  key={id}\n                            tabIndex={0}\n                            ref={el => itemRefs.current[i] = el}\n                            className=\"char__item\"\n                            onClick={() => {props.onCharSelect(id)\n                                            focusOnItem(i)}}\n                            onKeyDown={(e) => {\n                                if (e.code === 'Space' || e.key === \"Enter\") {\n                                props.onCharSelect(id)\n                                focusOnItem(i)}}}>\n                            <img src={thumbnail} alt={name} \n                            className={imgStyle}/>\n                            <div className=\"char__name\">{name}</div>\n                        </li>  \n                </CSSTransition>\n            \n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n                \n            </ul>\n        )\n    }\n    const items = useMemo(() => setContent(process, () => renderItems(charList), loadingMoreItems), [process])\n    return (\n        <div className=\"char__list\">\n            {items}\n            <button \n                style={{'display': charEnded ? 'none' : 'block'}}\n                disabled={loadingMoreItems}\n                onClick={() => {onRequest(offset)}}\n                className=\"button button__main button__long\"\n                >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n    \n}\n\nCharList.propTypes = {\n    onCharSelect: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport PropTypes from 'prop-types';\nimport './charInfo.scss';\n\n\nconst CharInfo = (props) => {\n    let [char, setChar] = useState(null);\n    let {getCharacter, clearError, process, setProcess} = useMarvelService();\n    \n    useEffect (() => {\n        updateChar(); \n        \n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.charId]);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n\n        clearError();\n        const id = props.charId;\n        if (!id) {\n            return;\n        }\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess(\"confirmed\"));\n        \n    }\n\n\n        return (\n            <div className=\"char__info\">\n                {setContent(process, View, char)}\n            </div>\n        )\n      \n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comicsList} = data;\n\n    return (\n        <>\n        \n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} className={thumbnail.includes('image_not_available')? \"no_img\" : null}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comicsList.length > 0 ? null : 'There is no comics info yet.'}\n                {comicsList.map((item, i) => {\n                    // eslint-disable-next-line array-callback-return\n                    if(i > 9 ) return;\n                   \n                    return (\n                        <>\n                        <li  key={i} className=\"char__comics-item\">{item.name}</li>\n                        </>\n                    )\n                })}\n            </ul>\n        </>\n    )\n\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useState} from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport { Link } from \"react-router-dom\";\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from \"../spiner/Spiner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport './charSearch.scss';\r\n\r\n\r\nconst setContent = (process, Component) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return null;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        case 'confirmed':\r\n            return <Component/>\r\n        case 'error':\r\n            return <ErrorMessage />\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n\r\n};\r\nconst CharSearch = () => {\r\n    const [character, setCharacter] = useState(null);\r\n    const {clearError, getCharacterByName, process, setProcess } = useMarvelService();\r\n    // console.log(character)\r\n\r\n    const links = (arr) => {\r\n        if (arr.length === 0) {\r\n            // setTimeout(() => {\r\n            // setProcess('waiting');\r\n            // }, 6000);\r\n            return (\r\n                <>\r\n                    <div className=\"error error_search\">No match on your request</div>\r\n                </>\r\n            )\r\n        }\r\n        let list = arr.map(item => {\r\n            return (\r\n                <li key={item.id} className=\"char__search-item\">\r\n                    <Link to={`characters/${item.id}`}>{item.name}</Link>\r\n                </li>\r\n            )\r\n        });\r\n        return (\r\n           <>\r\n                <div className=\"char__search-title\"> Search results : </div>\r\n                <ul className=\"char__search-results\">\r\n                    {list}\r\n                </ul>\r\n           </>\r\n           \r\n             )\r\n\r\n    };\r\n    const onSubmit = (name) => {\r\n        clearError();\r\n        getCharacterByName(name)\r\n            .then(setCharacter)\r\n            .then(() => setProcess(\"confirmed\"));\r\n        \r\n    };\r\n\r\n    // const items = Array.isArray(character)? links(character) : null;\r\n    // const spinner = loading ? <Spinner /> : null;\r\n    // const errorMessage = error ? <ErrorMessage/> : null\r\n    // const results = items ? items : null;\r\n\r\n    return (\r\n        <div className=\"char__search\">\r\n            <div className=\"char__search-title\">Or find a character by name:</div>\r\n            <Formik\r\n                initialValues={{\r\n                    name: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    name: Yup.string()\r\n                        .min(2, 'Мінімум 2 символи')\r\n                        .required(\"Обов'язкове поле\")\r\n                })}\r\n                onSubmit={values => onSubmit(values.name)}\r\n                >\r\n                <Form >\r\n                    <Field name='name' placeholder='Enter name' />\r\n                    \r\n                    <button type=\"submit\" className=\"button button__main\">\r\n                        <div className=\"inner\">Find</div>\r\n                    </button>\r\n                    <FormikErrorMessage className='error' name='name' component='div' />\r\n                </Form>\r\n                \r\n\r\n            </Formik>\r\n            {setContent(process,() => links(character))}\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default CharSearch;","import { Component } from \"react\";\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({error:true})\r\n    }\r\n    render() {\r\n            if (this.state.error) {\r\n                return <ErrorMessage/> \r\n            }\r\n\r\n            return this.props.children;\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearch from \"../CharSearch/CharSearch\";\r\nimport ErrorBoundary from \"../errorBounadary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setSelectedChar] = useState(null);\r\n    const onCharSelect = (id) => {\r\n        setSelectedChar(id);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelect={onCharSelect} />\r\n                </ErrorBoundary>\r\n              <div className=\"char__wrapper\">\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearch />\r\n                    </ErrorBoundary>\r\n              </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst  useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n                      \r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=35589cb5e6aa216ba55754511e0d35a8';\r\n    const _baseOffset = 210; \r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n       \r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n        }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?nameStartsWith=${name}&${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comicsList: char.comics.items\r\n        }\r\n    }\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?noVariants=true&startYear=2021&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }    \r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n        }\r\n\r\n    const _transformComic= (comic) => {\r\n        return {\r\n            title: comic.title,\r\n            description: comic.description ? `${comic.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price: comic.prices[0].price,\r\n            id: comic.id,\r\n            pageCount: comic.pageCount,\r\n            language: comic.textObjects[0] ? comic.textObjects[0].language : 'No information'\r\n            \r\n        }\r\n    }\r\n\r\n    return {\r\n        process,\r\n        setProcess,\r\n        clearError, \r\n        getAllCharacters, \r\n        getCharacter, \r\n        getAllComics, \r\n        getComic, \r\n        getCharacterByName };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n            setProcess('loading');\r\n\r\n            try {\r\n                const response = await fetch(url, {method, body, headers});\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                return data;\r\n            } catch(e) {\r\n                setProcess('error');\r\n                throw e;\r\n            }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {setProcess('waiting')}, []);\r\n    return {request, clearError, process, setProcess};\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from '../components/skeleton/Skeleton';\r\nimport Spinner from '../components/spiner/Spiner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading' :\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","thumbnail","name","description","homepage","wiki","className","includes","href","useState","char","setChar","useMarvelService","clearError","getCharacter","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","loadingMoreItems","setLoadingMoreItems","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","useMemo","Component","ErrorMessage","Error","arr","map","i","imgStyle","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelect","onKeyDown","e","code","key","TransitionGroup","component","renderItems","disabled","comicsList","charId","character","setCharacter","getCharacterByName","initialValues","validationSchema","Yup","min","required","onSubmit","values","placeholder","type","list","to","links","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","selectedChar","setSelectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","_baseOffset","res","results","_transformCharacter","slice","path","extension","urls","comics","getAllComics","_transformComic","getComic","comic","title","price","prices","pageCount","language","textObjects"],"sourceRoot":""}